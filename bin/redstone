#!/usr/bin/env coffee

require 'coffee-script'
program = require 'commander'
cluster = require 'cluster'
os = require 'os'

program
  .version('0.0.0')
  .option('-c, --connector', 'Run a connector instance')
  .option('-s, --server', 'Run a server instance')
  .option('-m, --master [master]', 'Run a master instance or specify a master to connect to')
  .option('--control <port>', 'Changes the port used for control protocol')
  .option('-S, --suppress', 'Supress logging')
  .option('-v, --verbose', 'Create more detailed logs')
  .option('-C, --chat', 'Log chat')
  .option('--config [file]', 'Loads the specified config file', '../config')
  .parse process.argv

if program.config? then config = require program.config
else config = {}


components = {}
components.connector = program.connector if program.connector == true
components.server = program.server if program.server == true
components.master = program.master if program.master == true

# if no components specified, run them all
unless components.connector or components.server or components.master
  components.connector = components.server = components.master = true

# check if more than one component is running
componentCount = Number(components.connector) + Number(components.server) + Number(components.master)
multipleComponents = componentCount > 1

config.control = Number (program.control or config.control or 8000)
config.master = program.master or config.master

# we either need a master to connect to, or we should run a local master
unless config.master or components.master
  console.log 'You must either specify a master to connect to or run a master instance'
  program.help()


# logging
winston = require 'winston'
levels =
  chat: -1
  debug: 0
  info: 1
  warn: 2
  error: 3
colors =
  chat: 'green'
  debug: 'white'
  info: 'cyan'
  warn: 'yellow'
  error: 'red'
transports = []
level =
  if program.suppress then 'error'
  else if program.chat then 'chat'
  else if program.verbose then 'debug'
  else 'info'
transports.push new winston.transports.Console
  colorize: true
  level: level
logger = new winston.Logger transports: transports, levels: levels
winston.addColors colors

control = process.env.CONTROL or config.control

startComponents = ->
  if components.server
    if cluster.isMaster and os.platform().indexOf('win') != 0
      cpus = os.cpus().length
      cluster.fork(CONTROL: control++) for i in [0...cpus]

    else
      logger.info 'Initializing server'
      Server = require '../lib/server'
      server = new Server config, control++, config.master
      server.on 'log', (e, level, message) ->
        logger.log level, (if multipleComponents then '[server] ' else '') + message
      server.start()


  if components.connector
    if cluster.isMaster and os.platform().indexOf('win') != 0
      cpus = os.cpus().length
      cluster.fork(CONTROL: control++) for i in [0...cpus]

    else
      logger.info 'Initializing connector'
      Connector = require '../lib/connector'
      connector = new Connector config, control++, config.master
      connector.on 'log', (e, level, message) ->
        logger.log level, (if multipleComponents then '[connector] ' else '') + message
      connector.start()

if components.master
  logger.info 'Initializing master'

  Master = require '../lib/master'

  c = control++
  config.master = 'localhost:'+c

  master = new Master config, c
  master.on 'log', (e, level, message) ->
    logger.log level, (if multipleComponents then '[master] ' else '') + message

  master.start()

  setTimeout startComponents, 2000
else
  startComponents()

process.on 'uncaughtException', (err) ->
  logger.log 'error', err.stack
